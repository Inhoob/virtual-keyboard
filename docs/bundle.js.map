{"version":3,"file":"bundle.js","mappings":"mBAEiB,ICFV,MACL,GACA,GACA,GACA,GACA,GACA,GACA,IAAY,EACZ,IAAa,EACbA,cACEC,MAAK,IACLA,MAAK,IAGP,KACEA,MAAK,EAAeC,SAASC,eAAe,aAC5CF,MAAK,EAAYA,MAAK,EAAaG,cAAc,WACjDH,MAAK,EAAgBA,MAAK,EAAaG,cAAc,SACrDH,MAAK,EAAcA,MAAK,EAAaG,cAAc,aACnDH,MAAK,EAAgBA,MAAK,EAAaG,cAAc,gBACrDH,MAAK,EAAWA,MAAK,EAAcG,cAAc,UAEnD,KACEH,MAAK,EAAUI,iBAAiB,SAAUJ,MAAK,GAC/CA,MAAK,EAAcI,iBAAiB,SAAUJ,MAAK,GACnDC,SAASG,iBAAiB,UAAWJ,MAAK,EAAWK,KAAKL,OAC1DC,SAASG,iBAAiB,QAASJ,MAAK,EAASK,KAAKL,OACtDA,MAAK,EAASI,iBAAiB,QAASJ,MAAK,GAC7CA,MAAK,EAAYI,iBACf,YACAJ,MAAK,EAAaK,KAAKL,OAEzBC,SAASG,iBAAiB,UAAWJ,MAAK,EAAWK,KAAKL,OAE5D,GAAWM,GACT,GAAIN,MAAK,EAAW,OACpBA,MAAK,GAAa,EAClB,MAAMO,EAAQD,EAAME,OAAOC,QAAQ,WAE7BC,IAAaH,GAAOI,UAAUC,SAAS,UACvCC,EAAMN,GAAOO,QAAQD,IACvBH,GAAcG,GAAe,UAARA,GAA2B,cAARA,IAC1Cb,MAAK,EAASe,OAASF,GAErBH,GAAoB,UAARG,IACdb,MAAK,EAASe,OAAS,KAErBL,GAAoB,cAARG,IACdb,MAAK,EAASe,MAAQf,MAAK,EAASe,MAAMC,MAAM,GAAI,IAEtDhB,MAAK,EAAYG,cAAc,YAAYQ,UAAUM,OAAO,UAE9D,GAAaX,GACPN,MAAK,IACTA,MAAK,GAAa,EAClBM,EAAME,OAAOC,QAAQ,YAAYE,UAAUO,IAAI,WAGjD,GAASZ,GACPa,QAAQC,IAAId,EAAME,OAAOO,OACzBT,EAAME,OAAOO,MAAQT,EAAME,OAAOO,MAAMM,QAAQ,gBAAiB,IAEnE,GAAWf,GACLN,MAAK,IACTA,MAAK,GAAY,EACjBA,MAAK,EAAcW,UAAUW,OAC3B,QACA,gBAAgBC,KAAKjB,EAAMkB,MAG7BxB,MAAK,EACFG,cAAc,cAAcG,EAAMmB,UACjCd,UAAUO,IAAI,WAEpB,GAASZ,GACHN,MAAK,IACTA,MAAK,GAAY,EACjBA,MAAK,EACFG,cAAc,cAAcG,EAAMmB,UACjCd,UAAUM,OAAO,WAEvB,GAAeX,GACbL,SAASyB,gBAAgBC,aACvB,QACArB,EAAME,OAAOoB,QAAU,YAAc,IAGzC,GAActB,GACZL,SAAS4B,KAAKC,MAAMC,WAAazB,EAAME,OAAOO,S","sources":["webpack://virtual-keyboard/./src/js/index.js","webpack://virtual-keyboard/./src/js/keyboard.js"],"sourcesContent":["import \"../style.css\";\nimport { Keyboard } from \"./keyboard\";\nconst keyboard = new Keyboard();\nkeyboard;\n","export class Keyboard {\n  #switchEl; //private field 사용 Keyboard 클래스를 생성하면 switchEl이 발생한다\n  #fontSelectEl;\n  #containerEl;\n  #keyboardEl;\n  #inputGroupEl;\n  #inputEl;\n  #keyPress = false; //마우스와 키보드가 눌려있는 상태인지 확인. 이것은 마우스와 키보드의 동시입력을 막으려고 지정\n  #mouseDown = false;\n  constructor() {\n    this.#assignElement();\n    this.#addEvent();\n  }\n\n  #assignElement() {\n    this.#containerEl = document.getElementById(\"container\");\n    this.#switchEl = this.#containerEl.querySelector(\"#switch\");\n    this.#fontSelectEl = this.#containerEl.querySelector(\"#font\");\n    this.#keyboardEl = this.#containerEl.querySelector(\"#keyboard\");\n    this.#inputGroupEl = this.#containerEl.querySelector(\"#input-group\");\n    this.#inputEl = this.#inputGroupEl.querySelector(\"#input\");\n  }\n  #addEvent() {\n    this.#switchEl.addEventListener(\"change\", this.#onChangeTheme);\n    this.#fontSelectEl.addEventListener(\"change\", this.#onChangeFont);\n    document.addEventListener(\"keydown\", this.#onKeyDown.bind(this)); //이 두개를 bind 하는 이유는 함수에서 this를 쓰고 있는데 전역객체의 this는 윈도우다. 윈도우에 #inputEl같은 요소가 없기 때문에 bind해주는 것\n    document.addEventListener(\"keyup\", this.#onKeyUp.bind(this));\n    this.#inputEl.addEventListener(\"input\", this.#onInput);\n    this.#keyboardEl.addEventListener(\n      \"mousedown\",\n      this.#onMouseDown.bind(this)\n    );\n    document.addEventListener(\"mouseup\", this.#onMouseUp.bind(this)); //mouseup을 keyboardEl에서 하지 않은 이유는 꼭 해당 키보드요소 위에서 마우스를 뗀다는 보장이 없다.\n  }\n  #onMouseUp(event) {\n    if (this.#keyPress) return;\n    this.#mouseDown = false;\n    const keyEl = event.target.closest(\"div.key\");\n    // const keyEl = event.target;\n    const isActive = !!keyEl?.classList.contains(\"active\");\n    const val = keyEl?.dataset.val; //data-val:'1' 인 경우 dataset.val으로 불러올 수 있다\n    if (isActive && !!val && val !== \"Space\" && val !== \"Backspace\") {\n      this.#inputEl.value += val;\n    }\n    if (isActive && val === \"Space\") {\n      this.#inputEl.value += \" \";\n    }\n    if (isActive && val === \"Backspace\") {\n      this.#inputEl.value = this.#inputEl.value.slice(0, -1);\n    }\n    this.#keyboardEl.querySelector(\".active\")?.classList.remove(\"active\");\n  }\n  #onMouseDown(event) {\n    if (this.#keyPress) return;\n    this.#mouseDown = true;\n    event.target.closest(\"div.key\")?.classList.add(\"active\"); //closest는 div.key라는 css 선택자를 찾을때까지 root방향으로 탐색\n    // event.target?.classList.add(\"active\"); //closest는 div.key라는 css 선택자를 찾을때까지 root방향으로 탐색\n  }\n  #onInput(event) {\n    console.log(event.target.value);\n    event.target.value = event.target.value.replace(/[ㄱ-ㅎ/ㅏ-ㅣ/가-힣]/, \"\");\n  }\n  #onKeyDown(event) {\n    if (this.#mouseDown) return;\n    this.#keyPress = true;\n    this.#inputGroupEl.classList.toggle(\n      \"error\",\n      /[ㄱ-ㅎ/ㅏ-ㅣ/가-힣]/.test(event.key)\n    );\n\n    this.#keyboardEl\n      .querySelector(`[data-code=${event.code}]`) //이 attribute를 가진 dom을 찾아라\n      ?.classList.add(\"active\"); //key를 눌렀을 때 css의 active 속성 추가\n  }\n  #onKeyUp(event) {\n    if (this.#mouseDown) return;\n    this.#keyPress = false;\n    this.#keyboardEl\n      .querySelector(`[data-code=${event.code}]`) //이 attribute를 가진 dom을 찾아라\n      ?.classList.remove(\"active\"); //key를 눌렀을 때 css의 active 속성 추가\n  }\n  #onChangeTheme(event) {\n    document.documentElement.setAttribute(\n      \"theme\",\n      event.target.checked ? \"dark-mode\" : \"\"\n    );\n  }\n  #onChangeFont(event) {\n    document.body.style.fontFamily = event.target.value;\n  }\n}\n"],"names":["constructor","this","document","getElementById","querySelector","addEventListener","bind","event","keyEl","target","closest","isActive","classList","contains","val","dataset","value","slice","remove","add","console","log","replace","toggle","test","key","code","documentElement","setAttribute","checked","body","style","fontFamily"],"sourceRoot":""}